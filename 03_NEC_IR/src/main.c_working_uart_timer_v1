#include "stm8s103f3p6.h"
#include <stdio.h>


void TIM4_Init(void) {
    // --- The Math ---
    // Target: 1 tick per millisecond (1000 Hz)
    // Master Clock (f_master) = 16 MHz = 16,000,000 Hz
    //
    // Total Prescaler = f_master / Target Frequency
    // Total Prescaler = 16,000,000 / 1000 = 16,000
    //
    // The TIM4 prescaler is 2^PSCR. Let's choose the largest one to maximize precision.
    // Let PSCR = 7, which gives a prescaler of 2^7 = 128.
    //
    // Now, we find the counter value (ARR - Auto-Reload Register)
    // ARR = Total Prescaler / (2^PSCR)
    // ARR = 16,000 / 128 = 125
    //
    // This value (125) fits perfectly in the 8-bit ARR register.
    // So, the timer will count 125 steps with a clock slowed down by 128.
    // This process takes exactly 1 millisecond.

    // 1. Set the Prescaler
    TIM4->PSCR = 0x07; // f_timer = 16MHz / 128 = 125kHz

    // 2. Set the Auto-Reload Register
    TIM4->ARR = 125;   // 125kHz / 125 = 1000 Hz = 1ms period

    // 3. Enable the timer
    TIM4->CR1 |= (1 << 0);
}

/* ---------------- Simple delay ---------------- */
void delay_ms(uint16_t ms) {
    while (ms--) {
        // Wait until the Update Interrupt Flag (UIF) is set
        // This flag is set by hardware when the counter overflows (every 1ms)
        while (!(TIM4->SR & (1 << 0)));

        // Clear the UIF flag by writing 0 to it.
        // This is important, otherwise the loop will exit immediately next time.
        TIM4->SR &= ~(1 << 0);
    }
}
/* ---------------- USART1 Initialization ---------------- */
void USART1_Init(void) {
    // Enable USART1 clock if needed (STM8S103S runs USART1 always)
    
    /* Configure PD5 as TX output push-pull */
    GPIOD->DDR |= (1 << 5);  // Set PD5 as output
    GPIOD->CR1 |= (1 << 5);  // Push-pull
    GPIOD->CR2 &= ~(1 << 5); // No interrupt, no fast output

    /* Configure USART1 */
    USART1->BRR2 = 0x03;  // Example for 9600 bps @ 16 MHz
    USART1->BRR1 = 0x68;  // Adjust according to clock
    USART1->CR1 = 0x00;  // TE: Transmitter enable
    USART1->CR2 |= (1 << 3);  // TEN: Enable TX
}

/* ---------------- Redirect printf ---------------- */
int putchar(int c) {
    if (c == '\n') putchar('\r');  // Add carriage return for terminals
    while (!(USART1->SR & (1 << 6)));  // Wait until TXE (Transmit Data Register Empty)
    USART1->DR = c;
    return c;
}

/* ---------------- Main ---------------- */
void main(void) {
    CLK->CKDIVR = 0x00;
    TIM4_Init();
    USART1_Init();

    while (1) {
        printf("Hello STM8!\n");
        delay_ms(6000);
    }
}

